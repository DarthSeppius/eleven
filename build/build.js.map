{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ajax.js","src/commandParser.js","src/commands.js","src/common/enums.js","src/common/voiceConfigs.js","src/core.js","src/document.js","src/eleven.js","src/regexp.js","src/speechRecognition.js","src/speechSynthesis.js","src/utils/cookies.js","src/utils/uuid.js","src/visualizer.js","src/window.js"],"names":[],"mappings":"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","file":"build.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import $ from './core';\n\n  var activeXHR = 0,\n      jsonPUID = 0,\n      emptyFn = function(){};\n\n  $.extend({\n    /**\n     * Default XHR configuration\n     * @type {Object}\n     */\n    ajaxSettings: {\n      accepts: {\n        html   : 'text/html',\n        json   : 'application/json',\n        script : 'text/javascript, application/javascript',\n        text   : 'text/plain',\n        xml    : 'application/xml, text/xml'\n      },\n      async       : true,\n      beforeSend  : emptyFn,\n      complete    : emptyFn,\n      context     : document,\n      crossDomain : false,\n      error       : emptyFn,\n      global      : true,\n      headers     : {},\n      callback    : {\n        fn        : 'jsonCallback',\n        param     : 'callback'\n      },\n      success     : emptyFn,\n      timeout     : 0,\n      type        : 'GET'\n    },\n    /**\n     * Creates an asynchronous XHR request\n     * @param  {Object} config  Object containing the request configuration\n     * @return {Object}         XHR request object\n     */\n    ajax(config){\n      var callback = $.regexp.callback.test(config.url),\n          config = $.extend(true, {}, $.ajaxSettings, config || {}),\n          data = config.data && $.isObject(config.data) && (config.data = $.params(config.data)) || null,\n          context = config.context,\n          contentType = config.contentType || 'application/x-www-form-urlencoded',\n          headers = config.headers,\n          method = config.type.toUpperCase(),\n          mimeType = config.accepts[config.dataType],\n          protocol = (/^((http|ftp|file)(s?)\\:)?/).test(config.url) ? RegExp.$1 : window.location.protocol,\n          type = config.dataType,\n          url = config.url || !config.url && (config.url = window.location.toString()),\n          xhr = config.xhr = new window.XMLHttpRequest();\n\n      if(method === 'GET' && data){\n        config.url += (config.url.indexOf('?') < 0 ? '?' : '&') + data;\n      }\n\n      if(config.dataType === 'jsonp'){\n        return $.jsonP(config);\n      }\n\n      xhr.onreadystatechange = function readyStateChange(){\n        var error = false,\n            requestTimeout,\n            result = '';\n\n        activeXHR++;\n\n        if(xhr.readyState === 4){\n          clearTimeout(requestTimeout);\n\n          if((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && protocol === 'file:')){\n            result = xhr.responseText;\n\n            try {\n              if(type === 'json' && !(/^\\s*$/g).test(result)){\n                result = $.parseJSON(result);\n              }\n              else if(type === 'xml'){\n                result = $.parseXML(xhr.responseXML);\n              }\n              else if(type === 'script'){\n                (1, eval)(result);\n              }\n            }catch(e){\n              error = e;\n            }\n\n            if(error){\n              config.error.call(context, xhr, 'parsererror', error);\n            }else{\n              config.success.call(context, result, 'success', xhr);\n            }\n          }else{\n            config.error.call(context, xhr, 'error', error);\n          }\n\n          config.complete.call(context, xhr, error ? 'error' : 'success');\n\n          activeXHR--;\n        }\n      }\n\n      if(config.beforeSend.call(context, xhr, config) === false){\n        xhr.abort();\n        activeXHR--;\n        return false;\n      }\n\n      if(mimeType){\n        headers['Accept'] = mimeType;\n        xhr.overrideMimeType && xhr.overrideMimeType(mimeType.split(',')[1] || mimeType.split(',')[0]);\n      }\n\n      if(contentType || (data && method !== 'GET')){\n        headers['Content-Type'] = contentType;\n      }\n\n      xhr.open(method, config.url, config.async);\n\n      for(var header in headers){\n        xhr.setRequestHeader(header, config.headers[header]);\n      }\n\n      if(config.timeout > 0){\n        requestTimeout = setTimeout(function(){\n          xhr.onreadystatechange = emptyFn;\n          config.error.call(context, xhr, 'timeout');\n          xhr.abort();\n          activeXHR--;\n        }, config.timeout);\n      }\n\n      xhr.send(data);\n\n      return xhr;\n    },\n    /**\n     * Shortcut JSONP method\n     * @param  {Object}   config  The JSONP config, including data (e.g. url: '...', data: { param: 'value' } )\n     * @param  {Function} success The callback function to execute upon success\n     * @param  {Function} error   The callback function to execute upon failure\n     */\n    jsonp(config, success, error){\n      if(typeof(config) !== 'object' || config && !config.url){\n        return undefined;\n      }\n\n      return $.ajax(\n        $.extend(true, {\n          dataType: 'jsonp',\n          success: (success || emptyFn),\n          error: (error || emptyFn)\n        }, config)\n      );\n    },\n    /**\n     * Fetch JSON data cross-domain with JSONP\n     * @param  {Object} config The request configuration\n     * @return {Object}\n     */\n    jsonP(config){\n      var script = document.createElement('script'),\n          fn = config.jsonp || 'jsonpCallback' + (jsonPUID++),\n          context = config.context,\n          data,\n          timeout;\n\n      script.src = config.url.replace($.regexp.callback, '?$1=' + fn);\n\n      script.onerror = function(){\n        config.xhr.abort();\n        config.error.call(context, null, 'error');\n      };\n\n      script.onload = function(){\n        if($.isFunction(config.success)){\n          config.success.call(context, data[0]);\n        }\n\n        script.parentNode.removeChild(script);\n\n        timeout && clearTimeout(timeout) && (timeout = null);\n\n        try {\n          delete window[fn];\n        }catch(e){\n          window[fn] = null;\n        }\n\n        data = null;\n      }\n\n      document.head.appendChild(script);\n\n      window[fn] = function(){\n        data = arguments;\n      }\n\n      if(config.timeout > 0){\n        timeout = setTimeout(function(){\n          script.parentNode.removeChild(script);\n\n          if(fn in window){\n            window[fn] = emptyFn;\n          }\n\n          config.error.call(context, null, 'timeout');\n          config.xhr.abort();\n        }, config.timeout);\n      }\n\n      return {};\n    },\n    /**\n     * Append additonal params to a URL query string\n     * @param  {String} url     The URL to append the new items to\n     * @param  {String} query   The additional query params\n     * @return {String}         The new query string\n     */\n    appendQuery(url, query) {\n      return (url + '&' + query).replace(/[&?]{1,2}/, '?');\n    },\n    /**\n     * Convert query string to key/value pairing\n     * @param  {String} query The URL containing the params\n     * @return {Object}       The new object containing the key value pairs from the query string\n     */\n    deparam(query){\n      var result = {};\n\n      if(!query){\n        return result;\n      }\n\n      $.each(query.split('&'), function(index, value){\n        if(value){\n          var param = value.split('=');\n          result[param[0]] = param[1];\n        }\n      });\n\n      return result;\n    },\n    /**\n     * Helper function to convert our data object to a valid URL query string\n     * @param  {Object} data    The object containing all our query data\n     * @return {String}         The query string\n     */\n    params(data){\n      return $.serialize([], data).join('&');//.replace('%20', '+');\n    },\n    /**\n     * Build query string from passed data arguments\n     * @param  {Array}  params  The array to store our key = value pairs in\n     * @param  {Object} data    The object containing the query data\n     * @param  {String} scope   The scope of the params\n     * @return {Array}          The updated params array\n     */\n    serialize(params, data, scope){\n      var array = $.isArray(data),\n          escape = encodeURIComponent;\n\n      $.each(data, function(key, value){\n        if(scope){\n          key = scope + '[' + (array ? '' : key) + ']';\n        }\n\n        if($.isPlainObject(value)){\n          $.serialize(params, value, key)\n        }else{\n          params.push(escape(key) + '=' + escape(value));\n        }\n      });\n\n      return params;\n    }\n  });\n\n  /**\n   * Shortcut GET request methods\n   * @param  {String}   url     The request URL\n   * @param  {Object}   data    The hash map of key/value pairs that will be sent with the request (optional)\n   * @param  {Function} success The success callback function\n   * @param  {Function} error   The failure callback function\n   */\n  ['get', 'getJSON'].forEach(function(method, index){\n    $[method] = function(url, data, success, error){\n      $.isFunction(data) && (error = success) && (success = data) && (data = {});\n\n      return $.ajax({\n        url: url,\n        data: data,\n        dataType: (index === 0 ? 'html' : 'json'),\n        success: (success || emptyFn),\n        error: (error || emptyFn)\n      });\n    }\n  });\n\n  export default $;\n","import $ from './core';\n\nconst parser = (command) => {\n  command = command\n  .replace($.regexp.escapeRegExp, '\\\\$&')\n  .replace($.regexp.optionalParam, '(?:$1)?')\n  .replace($.regexp.namedParam, function(match, optional){\n    return optional ? match : '([^\\\\s]+)';\n  })\n  .replace($.regexp.splatParam, '(.*?)')\n  .replace($.regexp.optionalRegex, '\\\\s*$1?\\\\s*');\n\n  return new RegExp('^' + command + '$', 'i');\n};\n\nexport default parser;\n","import $ from './core';\nimport parser from './commandParser';\n\n$.fn.extend({\n  /**\n   * Add one or more commands to Eleven's registry\n   *\n   * Example:\n   *\n   * var agent = Eleven();\n   *\n   * // add multiple commands\n   * agent.addCommands({\n   *   'hello :name': fn,\n   *   'hey (there)': fn,\n   *   'hi': fn\n   * });\n   *\n   * // or you can add a single command\n   * agent.addCommands('hi', fn);\n   *\n   * @param  {Object} commands Object containing commands and their callbacks\n   * @return {Object}          Eleven instance\n   */\n  addCommands: function(commands){\n    var command = {};\n\n    if(typeof(commands) === 'string' && arguments[1]){\n      command[commands] = arguments[1];\n      commands = command;\n    }\n\n    for(var phrase in commands){\n      command = commands[phrase];\n\n      if(command){\n        if($.isFunction(command)){\n          this.registerCommands(phrase, parser(phrase), command);\n        }\n        else if($.isObject(command) && $.isRegExp(command.regexp)){\n          this.registerCommands(phrase, new RegExp(command.regexp.source, 'i'), command.callback);\n        }\n        else{\n          if(this.options.debug){\n            console.debug(`[Eleven] Command registration failed: ${phrase}`);\n          }\n        }\n      }\n    }\n\n    return this;\n  },\n  /**\n   * Adds the passed command to the command list\n   * @param {String}   phrase   String continaing the command to listen for\n   * @param {String}   command  String representing the RegExp for the command\n   * @param {Function} callback Function to execute when command has been invoked\n   */\n  registerCommands: function(phrase, command, callback){\n    this.commands[phrase] = {\n      callback: callback,\n      phrase: phrase,\n      regexp: command\n    };\n\n    if(this.options.debug){\n      console.debug(`[Eleven] Command registered: ${phrase}`);\n    }\n  },\n  /**\n   * Remove one or more commands from Eleven's registry\n   *\n   * Example:\n   *\n   * var agent = Eleven();\n   *\n   * agent.addCommands({\n   *   'hello :name': fn,\n   *   'hey (there)': fn,\n   *   'hi': fn\n   * });\n   *\n   * // remove a single command\n   * agent.removeCommands('hi');\n   *\n   * // remove multiple commands\n   * agent.removeCommands(['hello :name', 'hi']);\n   *\n   * //remove all commands\n   * agent.removeCommands();\n   *\n   * @param  {Mixed} commands String or Array containing commands to remove from the command list\n   * @return {Object}         Eleven instance\n   */\n  removeCommands: function(commands){\n    var currentCommmands = this.commands;\n\n    if(commands === undefined){\n      return (this.commands = []) && this;\n    }\n\n    if(typeof(command) === 'string'){\n      commands = [commands];\n    }\n\n    $.each(commands, function(command){\n      if(currentCommmands[command]){\n        delete currentCommmands[command];\n      }\n    });\n\n    return this;\n  }\n});\n\nexport default $;\n","const eventTypes = {\n  INITIALIZE: 'INITIALIZE',\n  INSTALL: 'INSTALL',\n  SESSION_START: 'SESSION_START',\n  SPEECH: 'SPEECH',\n  SESSION_END: 'SESSION_END'\n};\n\nexport default eventTypes;\n","\n  export default {\n    allTypes: [\n      {name: 'Google UK English Male'}, //0 male uk android/chrome\n      {name: 'Agnes'}, //1 female us safari mac\n      {name: 'Daniel Compact'}, //2 male us safari mac\n      {name: 'Google UK English Female'}, //3 female uk android/chrome\n      {name: 'en-GB', rate: 0.25, pitch: 1}, //4 male uk IOS\n      {name: 'en-AU', rate: 0.25, pitch: 1}, //5 female english IOS\n      {name: 'inglés Reino Unido'}, //6 spanish english android\n      {name: 'English United Kingdom'}, //7 english english android\n      {name: 'Fallback en-GB Female', lang: 'en-GB', fallbackvoice: true}, //8 fallback english female\n      {name: 'Eszter Compact'}, //9 Hungarian mac\n      {name: 'hu-HU', rate: 0.4}, //10 Hungarian iOS\n      {name: 'Fallback Hungarian', lang: 'hu', fallbackvoice: true}, //11 Hungarian fallback\n      {name: 'Fallback Serbian', lang: 'sr', fallbackvoice: true}, //12 Serbian fallback\n      {name: 'Fallback Croatian', lang: 'hr', fallbackvoice: true}, //13 Croatian fallback\n      {name: 'Fallback Bosnian', lang: 'bs', fallbackvoice: true}, //14 Bosnian fallback\n      {name: 'Fallback Spanish', lang: 'es', fallbackvoice: true}, //15 Spanish fallback\n      {name: 'Spanish Spain'}, //16 female es android/chrome\n      {name: 'español España'}, //17 female es android/chrome\n      {name: 'Diego Compact', rate: 0.3}, //18 male es mac\n      {name: 'Google Español'}, //19 male es chrome\n      {name: 'es-ES', rate: 0.20}, //20 male es iOS\n      {name: 'Google Français'}, //21 FR chrome\n      {name: 'French France'}, //22 android/chrome\n      {name: 'francés Francia'}, //23 android/chrome\n      {name: 'Virginie Compact', rate: 0.5}, //24 mac\n      {name: 'fr-FR', rate: 0.25}, //25 iOS\n      {name: 'Fallback French', lang: 'fr', fallbackvoice: true}, //26 fallback\n      {name: 'Google Deutsch'}, //27 DE chrome\n      {name: 'German Germany'}, //28 android/chrome\n      {name: 'alemán Alemania'}, //29 android/chrome\n      {name: 'Yannick Compact', rate: 0.5}, //30 mac\n      {name: 'de-DE', rate: 0.25}, //31 iOS\n      {name: 'Fallback Deutsch', lang: 'de', fallbackvoice: true}, //32 fallback\n      {name: 'Google Italiano'}, //33 IT chrome\n      {name: 'Italian Italy'}, //34 android/chrome\n      {name: 'italiano Italia'}, //35 android/chrome\n      {name: 'Paolo Compact', rate: 0.5}, //36 mac\n      {name: 'it-IT', rate: 0.25}, //37 iOS\n      {name: 'Fallback Italian', lang: 'it', fallbackvoice: true}, //38 fallback\n      {name: 'Google US English', timerSpeed:1}, //39 EN chrome\n      {name: 'English United States'}, //40 android/chrome\n      {name: 'inglés Estados Unidos'}, //41 android/chrome\n      {name: 'Vicki'}, //42 mac\n      {name: 'en-US', rate: 0.2, pitch: 1, timerSpeed:1.3}, //43 iOS\n      {name: 'Fallback English', lang: 'en-US', fallbackvoice: true, timerSpeed:0}, //44 fallback\n      {name: 'Fallback Dutch', lang: 'nl', fallbackvoice: true, timerSpeed:0}, //45 fallback\n      {name: 'Fallback Romanian', lang: 'ro', fallbackvoice: true}, //46 Romanian Male fallback\n      {name: 'Milena Compact'}, //47 Russian mac\n      {name: 'ru-RU', rate: 0.25}, //48 iOS\n      {name: 'Fallback Russian', lang: 'ru', fallbackvoice: true}, //49 Russian fallback\n      {name: 'Google 日本人', timerSpeed:1}, //50 JP Chrome\n      {name: 'Kyoko Compact'}, //51 Japanese mac\n      {name: 'ja-JP', rate: 0.25}, //52 iOS\n      {name: 'Fallback Japanese', lang: 'ja', fallbackvoice: true}, //53 Japanese fallback\n      {name: 'Google 한국의', timerSpeed:1}, //54 KO Chrome\n      {name: 'Narae Compact'}, //55 Korean mac\n      {name: 'ko-KR', rate: 0.25}, //56 iOS\n      {name: 'Fallback Korean', lang: 'ko', fallbackvoice: true}, //57 Korean fallback\n      {name: 'Google 中国的', timerSpeed:1}, //58 CN Chrome\n      {name: 'Ting-Ting Compact'}, //59 Chinese mac\n      {name: 'zh-CN', rate: 0.25}, //60 iOS\n      {name: 'Fallback Chinese', lang: 'zh-CN', fallbackvoice: true}, //61 Chinese fallback\n\n      {name: 'Alexandros Compact'}, //62 Greek Male Mac\n      {name: 'el-GR', rate: 0.25}, //63 iOS\n      {name: 'Fallback Greek', lang: 'el', fallbackvoice: true}, //64 Greek Female fallback\n\n      {name: 'Fallback Swedish', lang: 'sv', fallbackvoice: true}, //65 Swedish Female fallback\n\n      {name: 'hi-IN', rate: 0.25}, //66 iOS\n      {name: 'Fallback Hindi', lang: 'hi', fallbackvoice: true}, //67 Hindi Female fallback\n\n      {name: 'Fallback Catalan', lang: 'ca', fallbackvoice: true}, //68 Catalan Male fallback\n\n      {name: 'Aylin Compact'}, //69 Turkish Female Mac\n      {name: 'tr-TR', rate: 0.25}, //70 iOS Turkish Female\n      {name: 'Fallback Turkish', lang: 'tr', fallbackvoice: true}, //71 Turkish Female fallback\n\n      {name: 'Stine Compact'}, //72 Norweigan Male Mac\n\n      {name: 'no-NO', rate: 0.25}, //73 iOS Female\n      {name: 'Fallback Norwegian', lang: 'no', fallbackvoice: true}, //74 Norwegian Female fallback\n\n      {name: 'Daniel'}, //75 English UK male uk safari 8 mac\n      {name: 'Monica'}, //76 Spanish female es safari 8 mac\n      {name: 'Amelie'}, //77 French Canadian female fr safari 8 mac\n      {name: 'Anna'}, //78 female de safari 8 mac\n      {name: 'Alice'}, //79 Italian female it safari 8 mac\n      {name: 'Melina'}, //80 Greek female gr safari 8 mac\n      {name: 'Mariska'}, //81 Hungarian female hu safari 8 mac\n      {name: 'Yelda'}, //82 Turkish female tr safari 8 mac\n      {name: 'Milena'}, //83 Russian female ru safari 8 mac\n\n      // Gender Disparity\n      {name: 'Xander'}, //84 Dutch female nl safari 8 mac\n      {name: 'Alva'},  //85 Swedish female sv safari 8 mac\n\n      // Gender Disparity\n      {name: 'Lee Compact'}, //86 Australian Male Mac\n      {name: 'Karen'}, //87 Australian Female safari 8 mac\n      {name: 'Fallback Australian', lang: 'en-AU', fallbackvoice: true}, //88 Australian Female fallback\n\n      // Gender Disparity\n      {name: 'Mikko Compact'}, //89 Finnish Male Mac\n      {name: 'Satu'}, //90 Finnish Female safari 8 mac\n      {name: 'fi-FI', rate: 0.25}, //91 iOS\n      {name: 'Fallback Finnish', lang: 'fi', fallbackvoice: true}, //92 Finnish Female fallback\n\n      {name: 'Fallback Afrikans', lang: 'af', fallbackvoice: true}, //93 Afrikans Male fallback\n\n      {name: 'Fallback Albanian', lang: 'sq', fallbackvoice: true}, //94 Albanian Male fallback\n\n      {name: 'Maged Compact'}, //95 Arabic Male Mac\n      {name: 'Tarik'}, //96 Arabic Male safari 8 mac\n      {name: 'ar-SA', rate: 0.25}, //97 iOS\n      {name: 'Fallback Arabic', lang: 'ar', fallbackvoice: true}, //98 Arabic Male fallback\n\n      {name: 'Fallback Armenian', lang: 'hy', fallbackvoice: true}, //99 Armenian Male fallback\n      {name: 'Zuzana Compact'}, //100 Czech Female Mac\n      {name: 'Zuzana'}, //101 Czech Female safari 8 mac\n      {name: 'cs-CZ', rate: 0.25}, //102 iOS\n      {name: 'Fallback Czech', lang: 'cs', fallbackvoice: true}, //103 Czech Female fallback\n      {name: 'Ida Compact'}, //104 Danish Female Mac\n      {name: 'Sara'}, //105 Danish Female safari 8 mac\n      {name: 'da-DK', rate: 0.25}, //106 iOS\n      {name: 'Fallback Danish', lang: 'da', fallbackvoice: true}, //107 Danish Female fallback\n      {name: 'Fallback Esperanto', lang: 'eo', fallbackvoice: true}, //108 Esperanto Male fallback\n      {name: 'Fallback Hatian Creole', lang: 'ht', fallbackvoice: true}, //109 Hatian Creole Female fallback\n      {name: 'Fallback Icelandic', lang: 'is', fallbackvoice: true}, //110 Icelandic Male fallback\n      {name: 'Damayanti'}, //111 Indonesian Female safari 8 mac\n      {name: 'id-ID', rate: 0.25}, //112 iOS\n      {name: 'Fallback Indonesian', lang: 'id', fallbackvoice: true}, //113 Indonesian Female fallback\n      {name: 'Fallback Latin', lang: 'la', fallbackvoice: true}, //114 Latin Female fallback\n      {name: 'Fallback Latvian', lang: 'lv', fallbackvoice: true}, //115 Latvian Male fallback\n      {name: 'Fallback Macedonian', lang: 'mk', fallbackvoice: true}, //116 Macedonian Male fallback\n      {name: 'Fallback Moldavian', lang: 'mo', fallbackvoice: true}, //117 Moldavian Male fallback\n      {name: 'Fallback Montenegrin', lang: 'sr-ME', fallbackvoice: true}, //118 Montenegrin Male fallback\n      {name: 'Agata Compact'}, //119 Polish Female Mac\n      {name: 'Zosia'}, //120 Polish Female safari 8 mac\n      {name: 'pl-PL', rate: 0.25}, //121 iOS\n      {name: 'Fallback Polish', lang: 'pl', fallbackvoice: true}, //122 Polish Female fallback\n      {name: 'Raquel Compact'}, //123 Brazilian Portugese Female Male Mac\n      {name: 'Luciana'}, //124 Brazilian Portugese Female safari 8 mac\n      {name: 'pt-BR', rate: 0.25}, //125 iOS\n      {name: 'Fallback Brazilian Portugese', lang: 'pt-BR', fallbackvoice: true}, //126 Brazilian Portugese Female fallback\n      {name: 'Joana Compact'}, //127 Portuguese Female Mac\n      {name: 'Joana'}, //128 Portuguese Female safari 8 mac\n      {name: 'pt-PT', rate: 0.25}, //129 iOS\n      {name: 'Fallback Portuguese', lang: 'pt-PT', fallbackvoice: true}, //130 Portuguese Female fallback\n      {name: 'Fallback Serbo-Croation', lang: 'sh', fallbackvoice: true}, //131 Serbo-Croation Male fallback\n      {name: 'Laura Compact'}, //132 Slovak Female Mac\n      {name: 'Laura'}, //133 Slovak Female safari 8 mac\n      {name: 'sk-SK', rate: 0.25}, //134 iOS\n      {name: 'Fallback Slovak', lang: 'sk', fallbackvoice: true}, //135 Slovak Female fallback\n\n      // Gender Disparity\n      {name: 'Javier Compact'}, //136 Spanish (Latin American) Male Mac\n      {name: 'Paulina'}, //137 Spanish Mexican Female safari 8 mac\n      {name: 'es-MX', rate: 0.25}, //138 iOS\n      {name: 'Fallback Spanish (Latin American)', lang: 'es-419', fallbackvoice: true}, //139 Spanish (Latin American) Female fallback\n      {name: 'Fallback Swahili', lang: 'sw', fallbackvoice: true}, //140 Swahili Male fallback\n      {name: 'Fallback Tamil', lang: 'ta', fallbackvoice: true}, //141 Tamil Male fallback\n      {name: 'Narisa Compact'}, //142 Thai Female Mac\n      {name: 'Kanya'}, //143 Thai Female safari 8 mac\n      {name: 'th-TH', rate: 0.25}, //144 iOS\n      {name: 'Fallback Thai', lang: 'th', fallbackvoice: true}, //145 Thai Female fallback\n      {name: 'Fallback Vietnamese', lang: 'vi', fallbackvoice: true}, //146 Vietnamese Male fallback\n      {name: 'Fallback Welsh', lang: 'cy', fallbackvoice: true}, //147 Welsh Male fallback\n\n      // Gender Disparity\n      {name: 'Oskar Compact'}, //148 Swedish Male Mac\n      {name: 'sv-SE', rate: 0.25}, //149 iOS\n\n      // Gender Disparity\n      {name: 'Simona Compact'}, //150 Romanian mac female\n      {name: 'Ioana'}, //151 Romanian Female safari 8 mac\n      {name: 'ro-RO', rate: 0.25}, //152 iOS female\n      {name: 'Kyoko'}, //153 Japanese Female safari 8 mac\n      {name: 'Lekha'}, //154 Hindi Female safari 8 mac\n      {name: 'Ting-Ting'}, //155 Chinese Female safari 8 mac\n      {name: 'Yuna'}, //156 Korean Female safari 8 mac\n\n      // Gender Disparity\n      {name: 'Xander Compact'}, //157 Dutch male or female nl safari 8 mac\n      {name: 'nl-NL', rate: 0.25}, //158 iOS\n      {name: 'Fallback UK English Male', lang: 'en-GB', fallbackvoice: true, service: 'g1', voicename: 'rjs'}, //159 UK Male fallback\n      {name: 'Finnish Male', lang: 'fi', fallbackvoice: true, service: 'g1', voicename: ''}, //160 Finnish Male fallback\n      {name: 'Czech Male', lang: 'cs', fallbackvoice: true, service: 'g1', voicename: ''}, //161 Czech Male fallback\n      {name: 'Danish Male', lang: 'da', fallbackvoice: true, service: 'g1', voicename: ''}, //162 Danish Male fallback\n      {name: 'Greek Male', lang: 'el', fallbackvoice: true, service: 'g1', voicename: ''}, //163 Greek Male fallback\n      {name: 'Hungarian Male', lang: 'hu', fallbackvoice: true, service: 'g1', voicename: ''}, //164 Hungarian Male fallback\n      {name: 'Latin Male', lang: 'la', fallbackvoice: true, service: 'g1', voicename: ''}, //165 Latin Male fallback\n      {name: 'Norwegian Male', lang: 'no', fallbackvoice: true, service: 'g1', voicename: ''}, //166 Norwegian Male fallback\n      {name: 'Slovak Male', lang: 'sk', fallbackvoice: true, service: 'g1', voicename: ''}, //167 Slovak Male fallback\n      {name: 'Swedish Male', lang: 'sv', fallbackvoice: true, service: 'g1', voicename: ''}, //168 Swedish Male fallback\n      {name: 'Fallback US English Male', lang: 'en', fallbackvoice: true, service: 'tts-api', voicename: ''}, //169 US English Male fallback\n      {name: 'German Germany', lang: 'de_DE'}, //170 Android 5 German Female\n      {name: 'English United Kingdom', lang: 'en_GB'}, //171 Android 5 English United Kingdom Female\n      {name: 'English India', lang: 'en_IN'}, //172 Android 5 English India Female\n      {name: 'English United States', lang: 'en_US'}, //173 Android 5 English United States Female\n      {name: 'Spanish Spain', lang: 'es_ES'}, //174 Android 5 Spanish Female\n      {name: 'Spanish Mexico', lang: 'es_MX'}, //175 Android 5 Spanish Mexico Female\n      {name: 'Spanish United States', lang: 'es_US'}, //176 Android 5 Spanish Mexico Female\n      {name: 'French Belgium', lang: 'fr_BE'}, //177 Android 5 French Belgium Female\n      {name: 'French France', lang: 'fr_FR'}, //178 Android 5 French France Female\n      {name: 'Hindi India', lang: 'hi_IN'}, //179 Android 5 Hindi India Female\n      {name: 'Indonesian Indonesia', lang: 'in_ID'}, //180 Android 5 Indonesian Female\n      {name: 'Italian Italy', lang: 'it_IT'}, //181 Android 5 Italian Female\n      {name: 'Japanese Japan', lang: 'ja_JP'}, //182 Android 5 Japanese Female\n      {name: 'Korean South Korea', lang: 'ko_KR'}, //183 Android 5 Japanese Female\n      {name: 'Dutch Netherlands', lang: 'nl_NL'}, //184 Android 5 Dutch Female\n      {name: 'Polish Poland', lang: 'pl_PL'}, //185 Android 5 Polish Female\n      {name: 'Portuguese Brazil', lang: 'pt_BR'}, //186 Android 5 Portuguese Brazil Female\n      {name: 'Portuguese Portugal', lang: 'pt_PT'}, //187 Android 5 Portuguese Portugal Female\n      {name: 'Russian Russia', lang: 'ru_RU'}, //188 Android 5 Russian Female\n      {name: 'Thai Thailand', lang: 'th_TH'}, //189 Android 5 Thai Female\n      {name: 'Turkish Turkey', lang: 'tr_TR'}, //190 Android 5 Turkish Female\n      {name: 'Chinese China', lang: 'zh_CN_#Hans'}, //191 Android 5 Chinese China Female\n      {name: 'Chinese Hong Kong', lang: 'zh_HK_#Hans'}, //192 Android 5 Chinese Hong Kong Simplified Female\n      {name: 'Chinese Hong Kong', lang: 'zh_HK_#Hant'}, //193 Android 5 Chinese Hong Kong Traditional Female\n      {name: 'Chinese Taiwan', lang: 'zh_TW_#Hant'} //194 Android 5 Polish Female\n    ],\n    defaultTypes: [\n      {name: 'UK English Female', ids: [3, 5, 1, 6, 7, 171, 8]},\n      {name: 'UK English Male', ids: [0, 4, 2, 6, 7, 75, 159]},\n      {name: 'US English Female', ids: [39, 40, 41, 42, 43, 173, 44]},\n      {name: 'Arabic Male', ids: [96,95,97,98]},\n      {name: 'Armenian Male', ids: [99]},\n      {name: 'Australian Female', ids: [87,86,5,88]},\n      {name: 'Brazilian Portuguese Female', ids: [124,123,125,186,126]},\n      {name: 'Chinese Female', ids: [58, 59, 60, 155, 191, 61]},\n      {name: 'Czech Female', ids: [101,100,102,103]},\n      {name: 'Danish Female', ids: [105,104,106,107]},\n      {name: 'Deutsch Female', ids: [27, 28, 29, 30, 31, 78, 170, 32]},\n      {name: 'Dutch Female', ids: [84, 157, 158, 184, 45]},\n      {name: 'Finnish Female', ids: [90,89,91,92]},\n      {name: 'French Female', ids: [21, 22, 23, 77, 178, 26]},\n      {name: 'Greek Female', ids: [62, 63, 80, 64]},\n      {name: 'Hatian Creole Female', ids: [109]},\n      {name: 'Hindi Female', ids: [66, 154, 179, 67]},\n      {name: 'Hungarian Female', ids: [9, 10, 81, 11]},\n      {name: 'Indonesian Female', ids: [111,112,180,113]},\n      {name: 'Italian Female', ids: [33, 34, 35, 36, 37, 79, 181, 38]},\n      {name: 'Japanese Female', ids: [50, 51, 52, 153, 182, 53]},\n      {name: 'Korean Female', ids: [54, 55, 56, 156, 183, 57]},\n      {name: 'Latin Female', ids: [114]},\n      {name: 'Norwegian Female', ids: [72, 73, 74]},\n      {name: 'Polish Female', ids: [120,119,121,185,122]},\n      {name: 'Portuguese Female', ids: [128,127,129,187,130]},\n      {name: 'Romanian Male', ids: [151, 150, 152, 46]},\n      {name: 'Russian Female', ids: [47,48,83,188,49]},\n      {name: 'Slovak Female', ids: [133,132,134,135]},\n      {name: 'Spanish Female', ids: [19, 16, 17, 18, 20, 76, 174, 15]},\n      {name: 'Spanish Latin American Female', ids: [137,136,138,175,139]},\n      {name: 'Swedish Female', ids: [85, 148, 149, 65]},\n      {name: 'Tamil Male', ids: [141]},\n      {name: 'Thai Female', ids: [143,142,144,189,145]},\n      {name: 'Turkish Female', ids: [69, 70, 82, 190, 71]},\n      {name: 'Afrikaans Male', ids: [93]},\n      {name: 'Albanian Male', ids: [94]},\n      {name: 'Bosnian Male', ids: [14]},\n      {name: 'Catalan Male', ids: [68]},\n      {name: 'Croatian Male', ids: [13]},\n      {name: 'Czech Male', ids: [161]},\n      {name: 'Danish Male', ids: [162]},\n      {name: 'Esperanto Male', ids: [108]},\n      {name: 'Finnish Male', ids: [160]},\n      {name: 'Greek Male', ids: [163]},\n      {name: 'Hungarian Male', ids: [164]},\n      {name: 'Icelandic Male', ids: [110]},\n      {name: 'Latin Male', ids: [165]},\n      {name: 'Latvian Male', ids: [115]},\n      {name: 'Macedonian Male', ids: [116]},\n      {name: 'Moldavian Male', ids: [117]},\n      {name: 'Montenegrin Male', ids: [118]},\n      {name: 'Norwegian Male', ids: [166]},\n      {name: 'Serbian Male', ids: [12]},\n      {name: 'Serbo-Croatian Male', ids: [131]},\n      {name: 'Slovak Male', ids: [167]},\n      {name: 'Swahili Male', ids: [140]},\n      {name: 'Swedish Male', ids: [168]},\n      {name: 'Vietnamese Male', ids: [146]},\n      {name: 'Welsh Male', ids: [147]},\n      {name: 'US English Male', ids: [169]}\n    ]\n  }\n\n","import document from './document';\nimport window from './window';\nimport SpeechRecognition from './speechRecognition';\nimport Enums from './common/enums';\nimport cookies from './utils/cookies';\nimport uuid from './utils/uuid';\n\nconst { slice } = [];\nconst { toString } = {};\nconst { trim } = String.prototype;\nconst class2type = {};\nconst noop = () => {};\n\nconst indexOf = (collection, item) => {\n  var i = 0,\n      k = collection.length;\n\n  for(; i < k; i++){\n    if(collection[i] === item){\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nconst each = (collection, fn) => {\n  var i = 0,\n      k = collection.length;\n\n  for(; i < k; i++){\n    var result = fn.call(collection[i], collection[i], i);\n\n    if(result === false){\n      break;\n    }\n  }\n};\n\n/**\n * Eleven\n * @constructor\n * @param  {Object} options Object containing Eleven's configuration\n * @return {Object}         Eleven instance\n */\nconst $ = (options) => $.initialized || new $.fn.init(options);\n\n$.fn = $.prototype = {\n  constructor: $,\n  version: '1.0.0',\n  context: null,\n  init(options){\n    const defaultConfig = {\n      debug: false,\n      language: 'en',\n      commands: [],\n      autoRestart: true,\n      continuous: true,\n      interimResults: true,\n      maxAlternatives: 5,\n      requiresWakeWord: true,\n      wake: {\n        commands: ['eleven', '11'],\n        audio: 'https://s3-us-west-1.amazonaws.com/voicelabs/static/chime.mp3',\n        commandWait: 10000\n      },\n      visualizer: {\n        height: 140,\n        ratio: 2,\n        wavesContainer: '.waves',\n        width: 280\n      }\n    };\n    // store options\n    this.options = $.extend(true, {}, defaultConfig, options || {});\n    // reference to all of our commands\n    this.commands = [];\n    // reference hash for installed plugins\n    this.plugins = {};\n    // create audio sound\n    this.wakeSound = new Audio(this.options.wake.audio);\n    // buffer restarts and prevent insanity\n    this.lastStartTime = this.restartCount = 0;\n    // used to manage eventing\n    this.listening = false;\n    // create interactive audio wave orb (aka Eleven)\n    this.visualize();\n    // prevent initialize until called\n    if(!this.options.delayStart){\n      // enable all the things!\n      this.enable();\n    }\n    // print the instance config\n    if(this.options.debug){\n      $$.debug = true;\n      console.debug(this);\n    }\n    // allow single instance (Speech API does not support multiple instances yet)\n    $.initialized = this;\n    // always return this for chaining\n    return this;\n  }\n};\n\n/**\n * Shallow copies all properties from the config object to the target object\n * @param  {Object} target   The receiving object you want to apply the config properties to\n * @param  {Object} config   The source object containing the new or updated default properties\n * @param  {Object} defaults The default values object (optional)\n * @return {Object}          The target object\n */\n$.apply = function(target, config, defaults){\n  defaults && $.apply(target, defaults);\n\n  if(target && config && typeof(config) === 'object'){\n    for(var i in config){\n      target[i] = config[i];\n    }\n  }\n\n  return target;\n};\n\n$.apply($, {\n  cookies: cookies,\n  indexOf: indexOf,\n  plugins: {},\n  each(collection, fn){\n    if(typeof(collection) === 'function'){\n      fn = collection;\n      collection = this;\n    }\n\n    if(typeof(collection.length) === 'number'){\n      each(collection, (item, index) => fn.call(item, item, index));\n    }else if(typeof(collection) === 'object'){\n      for(const key in collection){\n        const result = fn.call(collection[key], key, collection[key]);\n\n        if(result === false){\n          break;\n        }\n      }\n    }\n\n    return this;\n  },\n  /**\n   * Merge the contents of two or more objects into the target object\n   * @param  {Boolean} deep      If true, the merge becomes recursive (optional)\n   * @param  {Object}  target    Object receiving the new properties\n   * @param  {Object}  arguments One or more additional objects to merge with the first\n   * @return {Object}            The target object with the new contents\n   */\n  extend(){\n    var i = 1,\n        deep = false,\n        target = arguments[0] || {},\n        length = arguments.length;\n\n    if($.isBoolean(target)){\n      deep = target;\n      target = arguments[1] || {};\n      i++;\n    }\n\n    if(i === length){\n      target = this;\n      i--;\n    }\n\n    $.each(slice.call(arguments, i), (obj) => {\n      var src, copy, isArray, clone;\n\n      if(obj === target){\n        return;\n      }\n\n      if(deep && $.isArray(obj)){\n        target = target.concat(obj);\n      }else{\n        for(var key in obj){\n          src = target[key];\n          copy = obj[key];\n\n          if(target === copy || src === copy){\n            continue;\n          }\n\n          if(deep && copy && ($.isPlainObject(copy) || (isArray = $.isArray(copy)))){\n            if(isArray){\n              isArray = false;\n              clone = src && $.isArray( src ) ? src : [];\n            }else{\n              clone = src && $.isPlainObject( src ) ? src : {};\n            }\n\n            target[key] = $.extend(deep, clone, copy);\n          }\n          else if(copy !== undefined){\n            target[key] = copy;\n          }\n        }\n      }\n    });\n\n    return target;\n  },\n  /**\n   * Determines whether the array contains a specific value\n   * @param  {Mixed}   item     The item to look for in the array\n   * @param  {String}  array    The array of items\n   * @param  {Boolean} position Set true to return the index of the matched item or -1\n   * @return {Mixed}            The value of true or false, or the index at which the value can be found\n   */\n  inArray(item, array, position){\n    var result;\n    return $.isArray(array) ? (result = indexOf(array, item)) && (position ? result : result !== -1) : -1;\n  },\n  /**\n   * Determines whether the passed object is a number\n   * @param  {Object}  obj Object to type check\n   * @return {Boolean}     The true/false result\n   */\n  isNumber(obj){\n    return !isNaN(parseFloat(obj)) && isFinite(obj);\n  },\n  /**\n   * Determines whether the passed object is numeric\n   * @param  {Object}  obj Object to type check\n   * @return {Boolean}     The true/false result\n   */\n  isNumeric(obj){\n    return !$.isArray(obj) && obj - parseFloat(obj) >= 0;\n  },\n  /**\n   * Determine whether an Object is a plain object or not (created using \"{}\" or \"new Object\")\n   * @param  {Object}  obj Object to type check\n   * @return {Boolean}     The true/false result\n   */\n  isPlainObject(obj){\n    return $.isObject(obj) && !$.isWindow(obj) && !obj.nodeType && Object.getPrototypeOf(obj) === Object.prototype;\n  },\n  /**\n   * Determines whether the passed object is the Window object\n   * @param  {Object}  obj Object to type check\n   * @return {Boolean}     The true/false result\n   */\n  isWindow(obj){\n    return obj !== null && obj === global;\n  },\n  /**\n   * Parses a string as JSON, optionally transforming the value produced by parsing\n   * @param  {String}   text    The string to parse as JSON\n   * @param  {Function} reviver The transform function to execute on each key-value pair of the parsed object (optional)\n   * @return {Object}           The parsed JSON string\n   */\n  parseJSON(text, reviver){\n    try {\n      return JSON.parse(`${text}`, reviver);\n    }catch(error){\n      throw `Error occurred while trying to parse JSON string: ${error}`;\n    }\n  },\n  /**\n   * Parse a string as XML\n   * @param  {String} xml The XML string to parse\n   * @return {Object}     The DOM XML Object\n   */\n  parseXML(xml){\n    var parsed;\n\n    if(!xml || typeof(xml) !== 'string'){\n      return null;\n    }\n\n    try {\n      parsed = (new DOMParser).parseFromString(xml, 'text/xml');\n    }catch(error){\n      parsed = null;\n    }\n\n    if(!parsed || parsed.getElementsByTagName('parsererror').length){\n      throw Error(`Invalid XML: ${xml}`);\n    }\n\n    return parsed;\n  },\n  /**\n   * Adds plugin to the plugin registry for any Eleven instance to bind to\n   * @param {String}  name String containing the plugins unique name\n   * @param {Functio} fn   Constructor function of plugin\n   */\n  plugin(name, fn){\n    if(!this.plugins[name]){\n      if(!$.isFunction(fn)){\n        throw `\"${name}\" does not have a constructor.`;\n      }else{\n        this.plugins[name] = fn;\n      }\n    }\n\n    return this;\n  },\n  /**\n   * Executes a function within a specific scope\n   * @param  {Function} fn    The function whose scope will change\n   * @param  {Object}   scope The scope in which the function should be called\n   * @return {Function}       The function with the modified scope\n   */\n  proxy(fn, scope){\n    const args = slice.call(arguments, 2);\n\n    return $.isFunction(fn) ? function proxy(){\n      return fn.apply(scope || this, [...args, ...arguments])\n    } : undefined;\n  },\n  /**\n   * Executes the passed function when the DOM is \"ready\"\n   * @param {Function} fn The function to execute\n   */\n  ready(fn){\n    if(($.regexp.readyState).test(document.readyState)){\n      fn.call();\n    }else{\n      document.addEventListener('DOMContentLoaded', fn, false);\n    }\n\n    return this;\n  },\n  /**\n   * Removes all rendered elements from the viewport and executes a callback\n   * @param  {Function} fn Function to execute once the view has been cleared\n   */\n  resetView(selector, fn){\n    if($.isFunction(selector)){\n      fn = selector;\n      selector = '.results';\n    }\n\n    const results = document.querySelectorAll(selector);\n\n    if(results && results.length){\n      results.forEach((element) => element.parentNode && element.parentNode.removeChild(element));\n    }\n\n    if($.isFunction(fn)){\n      fn();\n    }\n\n    return this;\n  },\n  /**\n   * Converts a value to JSON, optionally replacing values if a replacer function is specified\n   * @param  {Mixed}  value    Value to convert to a JSON string\n   * @param  {Mixed}  replacer Transforms values and properties encountered while stringifying (optional)\n   * @param  {Mixed}  spaces   Causes the resulting string to be pretty-printed\n   * @return {String}          The JSON string\n   */\n  stringify(value, replacer, spaces){\n    return JSON.stringify(value, replacer, spaces);\n  },\n  /**\n   * Removes newlines, spaces (including non-breaking), and tabs from a text string\n   * @param  {String} text The text string to trim\n   * @return {String}      The modified string\n   */\n  trim(text){\n    return text === null ? '' : trim && trim.call(text) || (`${text}`).replace($.regexp.trim, '');\n  },\n  /**\n   * Returns the internal JavaScript [Class]] of an Object\n   * @param  {Object} obj Object to check the class property of\n   * @return {String}     Only the class property of the Object\n   */\n  type(obj){\n    return obj === null ? String(obj) : class2type[toString.call(obj)] || 'object';\n  },\n  /**\n   * Generates a random RFC4122 UUID\n   * @return {String} String containing the unique hash\n   */\n  uuid(){\n    return uuid();\n  }\n});\n\n/**\n * Creates type class check methods $.isArray(), $.isBoolean(), ...\n * @param  {Object}  obj The Object to type check\n * @return {Boolean}     The value of true or false\n */\n$.each(['Array', 'Boolean', 'Date', 'Error', 'Function', 'Object', 'RegExp', 'String'], function(name){\n  class2type[`[object ${name}]`] = name.toLowerCase();\n\n  $[`is${name}`] = (obj) => $.type(obj) === name.toLowerCase();\n});\n\n$.fn.init.prototype = $.fn;\n\n$.apply($.fn, {\n  each: $.each,\n  extend: $.extend,\n  /**\n   * Plugin cache\n   * @type {Object}\n   */\n  plugins: {},\n  /**\n   * Returns the specified plugin\n   * @param  {String} name String containing the plugins unique name\n   * @return {Object}      The plugin instance\n   */\n  getPlugin(name){\n    if(!this.plugins[name]){\n      throw `\"${name}\" plugin does not exist!`;\n    }\n\n    return this.plugins[name];\n  },\n  /**\n   * Registers a plugin with a given Eleven instance\n   * @param {String} name    String containing the plugins unique name\n   * @param {Object} options Object containing the options for that plugin\n   * @type {Object}          Eleven\n   */\n  plugin(name, options = {}){\n    if(!this.plugins[name] && $.plugins[name]){\n      if(options.commands){\n        this.addCommands(options.commands);\n      }\n\n      this.plugins[name] = new $.plugins[name](options);\n    }else{\n      throw `\"${name}\" plugin does not exist!`;\n    }\n\n    return this;\n  },\n  /**\n   * Iterates over a collection of objects\n   * @param {Mixed}    collection Collection to iterate over\n   * @param {Function} fn         Callback function\n   */\n  error(event){\n    const { error } = event;\n\n    if(error === 'not-allowed' || error === 'network'){\n      this.options.autoRestart = false;\n    }\n\n    if(this.options.debug){\n      console.warn(`[Eleven] SpeechRecognition event error: ${error}`);\n    }\n  },\n  /**\n   * Initializes the SpeechRecognition API, adds commands and binds event\n   * listeners. To avoid overlap with other tabs listening we used the\n   * `pagevisibility` API to abort the inactive tab instance.\n   * @return {Object} Eleven instance\n   */\n  enable(){\n    const options = this.options;\n    // reference to SpeechRecognition instance\n    this.recognition = new SpeechRecognition();\n    // set language\n    if(options.lang){\n      this.recognition.lang = options.lang;\n    }\n    // set max alternative results\n    this.recognition.maxAlternatives = options.maxAlternatives;\n    // set continuous listening\n    this.recognition.continuous = options.continuous;\n    // return results immediately so we can emulate audio waves\n    this.recognition.interimResults = options.interimResults;\n    // add commands\n    this.addCommands({\n      '*msg': options.onCommand,\n      'stop': () => {\n        if(this.listening){\n\n          $.resetView(() => {\n            document.body.classList.remove('interactive');\n          });\n\n          this.stop();\n        }\n      }\n    });\n    // load user defined commands\n    // if(options.commands){\n    //   this.addCommands(options.commands);\n    // }\n    // setup all SpeechRecognition event listeners\n    this.listen();\n    // fire activation event\n    if($.isFunction(options.onActivate)){\n      options.onActivate.call(this);\n    }\n\n    const autoRestartConfig = options.autoRestart;\n\n    document.addEventListener('visibilitychange', () => {\n      if(document.hidden){\n        if(this.recognition && this.recognition.abort && this.listening){\n          if(this.debug){\n            console.debug('[Eleven] User switched to another tab. Disabling listeners.');\n          }\n\n          this.options.autoRestart = false;\n          this.stop();\n          this.recognition.abort();\n        }\n      }else{\n        if(this.recognition && !this.listening){\n          if(this.debug){\n            console.debug('[Eleven] User switched back to this tab. Enabling listeners.');\n          }\n\n          this.options.autoRestart = autoRestartConfig;\n          this.start();\n        }\n      }\n    });\n\n    this.restart();\n\n    return this;\n  },\n  /**\n   * Binds callback functions to `onstart`, `onerror`, `onresult`,\n   * `onend` and `onaudioend` of SpeechRecognition API.\n   */\n  listen(){\n    this.recognition.onend = $.proxy(this.stop, this);\n    this.recognition.onerror = $.proxy(this.error, this);\n    this.recognition.onresult = $.proxy(this.result, this);\n    this.recognition.onstart = $.proxy(this.start, this);\n    this.recognition.onaudioend = $.proxy(this.stop, this);\n    this.recognition.onaudiostart = () => {\n      if($.isFunction(this.options.onStart)){\n        this.options.onStart.call(this);\n      }\n    };\n  },\n\n  parser(results){\n    var options = this.options;\n\n    if($.isFunction(options.onResult)){\n      options.onResult.call(this, results);\n    }\n\n    setTimeout(() => {\n      if(this.running && this.visualizer){\n        this.running = false;\n        this.visualizer.stop();\n      }\n\n      this.options.visualizer.container.classList.remove('ready');\n      this.activated = false;\n    }, 750);\n\n    for(var i = 0, k = results.length; i < k; i++){\n      var recognizedSpeech = results[i].trim();\n\n      if(options.debug){\n        console.debug('[Eleven] Speech recognized: ', recognizedSpeech);\n      }\n\n      for(const item in this.commands){\n        const command = this.commands[item];\n        const phrase = command.phrase;\n        const result = command.regexp.exec(recognizedSpeech);\n\n        if(result){\n          var parameters = result.slice(1);\n\n          if(options.debug){\n            console.debug(`[Eleven] Command match: ${phrase}`);\n\n            if(parameters.length){\n              console.debug(`[Eleven] Command has parameters: ${JSON.stringify(parameters, null, 2)}`);\n            }\n          }\n\n          command.callback.call(this, parameters, recognizedSpeech, phrase);\n\n          //this.insights.track(results[0], null, recognizedSpeech);\n\n          if($.isFunction(options.onResultMatch)){\n            options.onResultMatch.call(this, parameters, recognizedSpeech, phrase, results);\n          }\n\n          this.options.visualizer.container.classList.remove('ready');\n          this.activated = false;\n\n          return;\n        }\n      }\n    }\n\n    if($.isFunction(options.onResultNoMatch)){\n      options.onResultNoMatch.call(this, results);\n    }\n  },\n\n  result(event){\n    var result = event.results[event.resultIndex],\n        results = [];\n\n    if(this.options.wake.commands.indexOf(result[0].transcript.trim()) !== -1){\n      if(!this.activated){\n        this.activated = true;\n        this.options.visualizer.container.classList.add('ready');\n        this.wakeSound.play();\n\n        this.commandTimer = setTimeout(() => {\n          this.activated = false;\n          this.options.visualizer.container.classList.remove('ready');\n        }, this.options.wake.commandWait);\n      }\n    }else {\n      if(this.activated){\n        if(!this.running && this.visualizer){\n          this.running = true;\n          this.visualizer.start();\n          clearTimeout(this.commandTimer);\n        }\n\n        for(var i = 0, k = result.length; i < k; i++){\n          if(result.isFinal){\n            results[i] = result[i].transcript.trim();\n          }\n        }\n\n        if(results.length){\n          this.parser(results);\n        }\n      }\n    }\n  },\n  restart(){\n    const timeSinceLastStart = new Date().getTime() - this.lastStartTime;\n\n    this.restartCount += 1;\n\n    if(this.restartCount % 10 === 0){\n      if(this.options.debug){\n        console.debug('[Eleven] Speech Recognition is repeatedly stopping and starting.');\n      }\n    }\n\n    if(timeSinceLastStart < 1000){\n      setTimeout(() => {\n        this.start();\n      }, 1000 - timeSinceLastStart);\n    }else{\n      this.start();\n    }\n  },\n\n  start(){\n    if(!this.listening){\n      this.listening = true;\n\n      this.lastStartTime = new Date().getTime();\n\n      try {\n        this.recognition.start();\n      }\n      catch(e){\n        if(this.options.debug){\n          console.warn(`[Eleven] Error trying to start SpeechRecognition: ${e.message}`);\n        }\n      }\n    }\n\n    return this;\n  },\n\n  stop(){\n    if(this.listening){\n      this.listening = false;\n\n      if(this.running && this.visualizer){\n        this.running = false;\n        this.visualizer.stop();\n      }\n\n      if($.isFunction(this.options.onEnd)){\n        this.options.onEnd.call(this);\n      }\n\n      if(this.options.autoRestart){\n        this.restart();\n      }\n    }\n\n    return this;\n  }\n});\n\nexport default $;\n","import window from './window';\n\nexport default window.document;\n","import $ from './core';\nimport './ajax';\nimport './commands';\nimport './regexp';\nimport './speechSynthesis';\nimport './visualizer';\n\nexport default $;\n","import $ from './core';\n\n$.regexp = {\n  callback      : /\\?(.+)=\\?/,\n  escapeRegExp  : /[\\-{}\\[\\]+?.,\\\\\\^$|#]/g,\n  optionalParam : /\\s*\\((.*?)\\)\\s*/g,\n  optionalRegex : /(\\(\\?:[^)]+\\))\\?/g,\n  namedParam    : /(\\(\\?)?:\\w+/g,\n  readyState    : /^(?:complete|loaded|interactive)$/i,\n  splatParam    : /\\*\\w+/g,\n  trim          : /^\\s+|\\s+$/g,\n  whitespaces   : /^\\s*$/g\n};\n\nexport default $;\n","import window from './window';\n\nexport default (\n  window.SpeechRecognition ||\n  window.webkitSpeechRecognition ||\n  window.mozSpeechRecognition ||\n  window.msSpeechRecognition ||\n  window.oSpeechRecognition\n);\n","import $ from './core';\nimport window from './window';\nimport voiceConfigs from './common/voiceConfigs';\n\nconst speechSynthesis = window.speechSynthesis;\n\nconst Speech = {\n  init: function(options){\n    this.voiceTypes = voiceConfigs.defaultTypes;\n    this.voiceTypesCollection = voiceConfigs.allTypes;\n    this.deviceSupportedVoices = null;\n    this.messageConfig = null;\n\n    this.CHARACTER_LIMIT = 100;\n    this.WORDS_PER_MINUTE = 140;\n\n    // wait until system voices are ready and trigger the event OnVoiceReady\n    if(speechSynthesis){\n      speechSynthesis.onvoiceschanged = () => {\n        this.deviceSupportedVoices = speechSynthesis.getVoices();\n      };\n    }\n\n    this.defaultVoiceSelection = this.voiceTypes[0];\n\n    // wait a 100ms before calling getVoices() to correct issues with Chrome\n    setTimeout(() => {\n      var voices = speechSynthesis.getVoices();\n\n      if(voices.length){\n        console.debug('[Eleven] Voice support is ready');\n        this.deviceVoicesReady(voices);\n      }else{\n        console.warn('[Eleven] Voice synthesis is not supported.');\n      }\n    }, 100);\n\n    return this.speak;\n  },\n  /**\n   * [function description]\n   * @param  {[type]} voices [description]\n   * @return {[type]}        [description]\n   */\n  deviceVoicesReady: function(voices){\n    this.deviceSupportedVoices = voices;\n\n    this.mapSupportedVoices();\n  },\n  /**\n   * Maps the system voices to our default voices settings\n   * @return {[type]} [description]\n   */\n  mapSupportedVoices: function(){\n    var self = this;\n\n    $.each(this.voiceTypes, function(voiceOption){\n      $.each(voiceOption.ids, function(id){\n        var voiceInCollection = self.voiceTypesCollection[id],\n            systemVoice = !voiceInCollection.fallbackvoice ? self.getDeviceSupportedVoice(voiceInCollection.name) : {};\n\n        voiceOption.mappedProfile = {\n          deviceVoice: systemVoice,\n          collectionVoice: voiceInCollection\n        };\n\n        return false;\n      });\n    });\n  },\n\n  getDeviceSupportedVoice: function(name){\n    var result = null;\n\n    if(!this.deviceSupportedVoices){\n      return null;\n    }\n\n    $.each(this.deviceSupportedVoices, function(voice){\n      if(voice.name === name){\n        result = voice;\n        return false;\n      }\n    });\n\n    return result;\n  },\n\n  cancel: function(){\n    this.cancelled = true;\n    speechSynthesis.cancel();\n  },\n\n  getMatchedVoice: function(voice){\n    var self = this,\n        result = null;\n\n    $.each(voice.ids, function(id){\n      var find = self.getDeviceSupportedVoice(self.voiceTypesCollection[id].name);\n\n      if(find){\n        result = find;\n        return false;\n      }\n    });\n\n    return result;\n  },\n\n  getResponsiveVoice: function(name){\n    var result = null;\n\n    $.each(this.voiceTypes, function(voice){\n      if(voice.name === name){\n        result = voice;\n        return false;\n      };\n    });\n\n    return result;\n  },\n\n  speak: function(text, voicename, parameters){\n    if(speechSynthesis.speaking){\n      this.cancelled = true;\n      speechSynthesis.cancel();\n    }\n\n    text = text.replace(/[\\\"\\`]/gm, '\\'');\n\n    this.messageConfig = parameters ||  {};\n    this.msgtext = text;\n    this.msgvoicename = voicename;\n\n    // Support for multipart text (there is a limit on characters)\n    var multipartText = [];\n\n    if(text.length > this.CHARACTER_LIMIT){\n      var tmptxt = text;\n\n      while(tmptxt.length > this.CHARACTER_LIMIT){\n        // split by common phrase delimiters\n        var phrase = tmptxt.search(/[:!?.;]+/),\n            part = '';\n\n        // coludn't split by priority characters, try commas\n        if(phrase == -1 || phrase >= this.CHARACTER_LIMIT){\n          phrase = tmptxt.search(/[,]+/);\n        }\n\n        // couldn't split by normal characters, then we use spaces\n        if(phrase == -1 || phrase >= this.CHARACTER_LIMIT){\n          var words = tmptxt.split(' ');\n\n          for(var i = 0; i < words.length; i++){\n\n            if(part.length + words[i].length + 1 > this.CHARACTER_LIMIT){\n              break;\n            }\n\n            part += (i != 0 ? ' ' : '') + words[i];\n          }\n        }else{\n          part = tmptxt.substr(0, phrase + 1);\n        }\n\n        tmptxt = tmptxt.substr(part.length, tmptxt.length - part.length);\n\n        multipartText.push(part);\n      }\n\n      // add the remaining text\n      if(tmptxt.length){\n        multipartText.push(tmptxt);\n      }\n    }else{\n      // small text\n      multipartText.push(text);\n    }\n\n    // find system voice that matches voice name\n    var rv = !voicename ? this.defaultVoiceSelection : this.getResponsiveVoice(voicename),\n        profile = {};\n\n    // Map was done so no need to look for the mapped voice\n    if(rv.mappedProfile){\n      profile = rv.mappedProfile;\n    }else{\n      profile.deviceVoice = this.getMatchedVoice(rv);\n      profile.collectionVoice = {};\n\n      if(!profile.deviceVoice){\n        console.log('[Eleven] ERROR: No voice found for: ' + voicename);\n        return;\n      }\n    }\n\n    this.msgprofile = profile;\n\n    for(var i = 0; i < multipartText.length; i++){\n      // Create msg object\n      var msg = new SpeechSynthesisUtterance();\n\n      $.extend(msg, {\n        voice: profile.deviceVoice,\n        voiceURI: profile.deviceVoice.voiceURI,\n        volume: this.preferred([profile.collectionVoice.volume, profile.deviceVoice.volume, 1]), // 0 to 1\n        rate: this.preferred([profile.collectionVoice.rate, profile.deviceVoice.rate, 1]),       // 0.1 to 10\n        pitch: this.preferred([profile.collectionVoice.pitch, profile.deviceVoice.pitch, 1]),    // 0 to 2\n        text: multipartText[i],\n        lang: this.preferred([profile.collectionVoice.lang, profile.deviceVoice.lang]),\n        rvIndex: i,\n        rvTotal: multipartText.length\n      });\n\n      if(i == 0){\n        msg.onstart = $.proxy(this.start, this);\n      }\n\n      this.messageConfig.onendcalled = false;\n\n      if(parameters){\n        if(i < multipartText.length - 1 && multipartText.length > 1){\n          msg.onend = parameters.onchunkend;\n          msg.addEventListener('end', parameters.onchuckend);\n        }else{\n          msg.onend = this.stop;\n          msg.addEventListener('end', $.proxy(this.stop, this));\n        }\n\n        msg.onerror = parameters.onerror || function(e){\n          console.log('[Eleven] Unknow Error');\n          console.log(e);\n        };\n\n        msg.onpause = parameters.onpause;\n        msg.onresume = parameters.onresume;\n        msg.onmark = parameters.onmark;\n        msg.onboundary = parameters.onboundary;\n        msg.pitch = parameters.pitch ? parameters.pitch : msg.pitch;\n        msg.rate = (parameters.rate ? parameters.rate : 1) * msg.rate;\n        msg.volume = parameters.volume ? parameters.volume : msg.volume;\n      }else{\n\n        msg.onend = $.proxy(this.end, this);\n\n        msg.onerror = function (e) {\n          console.log('[Eleven] Unknow Error');\n          console.log(e);\n        };\n      }\n\n      speechSynthesis.speak(msg);\n    }\n  },\n\n  start: function(){\n    this.messageConfig.onendcalled = false;\n\n    if(this.messageConfig && $.isFunction(this.messageConfig.onStart)){\n      this.messageConfig.onStart();\n    }\n  },\n\n  stop: function(){\n    // avoid this being automatically called just after calling speechSynthesis.cancel\n    if(this.cancelled === true){\n      this.cancelled = false;\n      return;\n    }\n\n    //console.log(\"on end fired\");\n    if(this.messageConfig && this.messageConfig.onendcalled !== true && $.isFunction(this.messageConfig.onEnd)){\n      //console.log(\"Speech on end called  -\" + this.msgtext);\n      this.messageConfig.onendcalled = true;\n      this.messageConfig.onEnd();\n    }\n  },\n\n  preferred: function(a){\n    for(var i = 0, k = a.length; i < k; i++){\n      if(a[i]){\n        return a[i];\n      }\n    }\n\n    return null;\n  }\n};\n\n// init SpeechSynthesis\nSpeech.init();\n// export speak\n$.speak = $.proxy(Speech.speak, Speech);\n\nexport default $;\n","import document from '../document';\n\nconst cookies = {\n  /**\n   * Determines whether a specific cookie exists\n   * @param  {String} key String containing the cookie key/name to for\n   * @return {Boolean}    The true/false result\n   */\n  contains: function(key){\n    if(!key){\n      return false;\n    }\n\n    return (new RegExp('(?:^|;\\\\s*)' + encodeURIComponent(key).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') + '\\\\s*\\\\=')).test(document.cookie);\n  },\n  /**\n   * Returns a cookie from document.cookies\n   * @param  {String} key String containing the cookie name/key to lookup\n   * @return {String}     The value of the passed cookie key\n   */\n  get: function(key){\n    if(!key){\n      return null;\n    }\n\n    return decodeURIComponent(\n      document.cookie.replace(\n        new RegExp('(?:(?:^|.*;)\\\\s*' + encodeURIComponent(key).replace(/[\\-\\.\\+\\*]/g, '\\\\$&') + '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1'\n      )\n    );\n  },\n  /**\n   * Returns all cookies keys found inside document.cookies\n   * @return {Array} Collection of cookie key values\n   */\n  keys: function(){\n    var keys = document.cookie.replace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g, '').split(/\\s*(?:\\=[^;]*)?;\\s*/);\n\n    for(var i = 0, k = keys.length; i < k; i++){\n      keys[i] = decodeURIComponent(keys[i]);\n    }\n\n    return keys;\n  },\n  /**\n   * Removes a cookie from document.cookies\n   * @param  {String} key    String containing the cookie key/name to lookup\n   * @param  {String} path   String containing the path defined during cookie creation\n   * @param  {String} domain String containing the defined during cookie creation\n   * @return {Object}        Cookie singleton\n   */\n  remove: function(key, path, domain){\n    if(!this.contains(key)){\n      return this;\n    }\n\n    document.cookie = encodeURIComponent(key) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT' + (domain ? '; domain=' + domain : '') + (path ? '; path=' + path : '');\n\n    return this;\n  },\n  /**\n   * Creates a new cookie from the passed arguments\n   * @param  {String} key     String containing the cookie key/name to lookup\n   * @param  {String} value   String containing the value you want to set inside the cookie\n   * @param  {Mixed} age      Value of expiration\n   * @param  {String} path    String containing the path in which the cookie will be available\n   * @param  {String} domain  String containing the domains/subdomains the cookie will be available\n   * @param  {Boolean} secure True, if secure\n   * @return {Object}         Cookie singleton\n   */\n  set: function(key, value, age, path, domain, secure){\n    if(!key || /^(?:expires|max\\-age|path|domain|secure)$/i.test(key)){\n      return false;\n    }\n\n    var expires = '';\n\n    if(age){\n      switch(age.constructor){\n        case Number:\n          expires = age === Infinity ? '; expires=Fri, 31 Dec 9999 23:59:59 GMT' : '; max-age=' + age;\n          break;\n        case String:\n          expires = '; expires=' + age;\n          break;\n        case Date:\n          expires = '; expires=' + age.toUTCString();\n          break;\n      }\n    }\n\n    document.cookie = [\n      encodeURIComponent(key) + '=' + encodeURIComponent(value),\n      expires,\n      (domain ? '; domain=' + domain : ''),\n      (path ? '; path=' + path : ''),\n      (secure ? '; secure' : '')\n    ].join('')\n\n    return this;\n  }\n};\n\nexport default cookies;\n","  /**\n   * Generates a GUID\n   * @return {String} String containing the unique hash\n   */\n  export default function(){\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c){\n      var r = Math.random() * 16 | 0,\n          v = c == 'x' ? r : (r&0x3|0x8);\n      return v.toString(16);\n    });\n  }\n","import $ from './core';\n\n$.fn.extend({\n  visualize(){\n    const options = this.options;\n    var container = options.visualizer.container;\n\n    if(!container){\n      container = document.createElement('div');\n\n      container.id = 'eleven';\n\n      container.innerHTML = [\n        '<div class=\"eleven-container\">',\n          '<div class=\"eleven-container-inner\">',\n            '<div class=\"eleven-off\">',\n              '<span>ELEVEN</span>',\n            '</div>',\n            '<div class=\"eleven-on\">',\n              '<div class=\"bg\"></div>',\n              '<div class=\"waves\"></div>',\n            '</div>',\n          '</div>',\n        '</div>'\n      ].join('');\n\n      document.body.appendChild(container);\n\n      options.visualizer.container = container;\n    }\n\n    this.visualizer = new Visualizer(options.visualizer);\n  },\n  /**\n   * Returns the visualizer DOM Element and the instance\n   * @param  {String} String containing either 'DOM' or 'instance'\n   * @return {Array}  containing the container DOM element and instance\n   */\n  getVisualizer(property){\n    if(this.visualizer[property]){\n      return this.visualizer[property]\n    }\n\n    return this.visualizer;\n  }\n});\n\n/*------------------------------------\n * Visualization\n ------------------------------------*/\n\nfunction Curve(opt){\n  opt = opt || {};\n  this.controller = opt.controller;\n  this.color = opt.color;\n  this.tick = 0;\n  this.respawn();\n}\n\n$.apply(Curve.prototype, {\n  respawn(){\n    this.amplitude = .3 + Math.random() * .7;\n    this.seed = Math.random();\n    this.openClass = 2 + (Math.random()*3)|0;\n  },\n\n  equation(i){\n    var p = this.tick,\n        y = -1 * Math.abs(Math.sin(p)) * this.controller.amplitude * this.amplitude * this.controller.MAX * Math.pow(1 / (1 + Math.pow(this.openClass * i, 2)), 2);\n\n    if(Math.abs(y) < 0.001){\n      this.respawn();\n    }\n\n    return y;\n  },\n\n  paint(m){\n    const context = this.controller.context;\n    const width = this.controller.width;\n    const xBase = width / 2 + (-width / 4 + this.seed * (width / 2) );\n    const yBase = this.controller.height / 2;\n    var x, y, xInitial, i = -3;\n\n    this.tick += this.controller.speed * (1 - .5 * Math.sin(this.seed * Math.PI));\n\n    context.beginPath();\n\n    while(i <= 3){\n      x = xBase + i * width / 4;\n      y = yBase + (m * this.equation(i));\n      xInitial = xInitial || x;\n\n      context.lineTo(x, y);\n\n      i += .01;\n    }\n\n    const h = Math.abs(this.equation(0));\n    const gradient = context.createRadialGradient(xBase, yBase, h * 1.15, xBase, yBase, h * .3);\n    const color = this.color.join(',');\n\n    gradient.addColorStop(0, `rgba(${color}, .4)`);\n    gradient.addColorStop(1, `rgba(${color}, .2)`);\n    // set gradient\n    context.fillStyle = gradient;\n    // add glow\n    context.shadowColor = `rgba(${color}, .8)`;\n    context.shadowBlur = 50;\n\n    context.lineTo(xInitial, yBase);\n    context.closePath();\n    context.fill();\n  },\n\n  draw(){\n    this.paint(-1);\n    this.paint(1);\n  }\n});\n\nfunction Visualizer(options){\n  options = options || {};\n\n  this.curves = [];\n  this.tick = 0;\n  this.run = false;\n  this.cover = options.cover || true;\n  this.ratio = options.ratio || window.devicePixelRatio || 1.2;\n  this.width = this.ratio * (options.width || 320);\n  this.height = this.ratio * (options.height || 100);\n  this.MAX = this.height / 2;\n  this.speed = .08;\n  this.amplitude = .7;\n\n  this.speedInterpolationSpeed = 0.005;\n  this.amplitudeInterpolationSpeed = 0.05;\n\n  this.interpolation = {\n    speed: this.speed,\n    amplitude: this.amplitude\n  };\n\n  this.canvas = document.createElement('canvas');\n  this.canvas.width = this.width;\n  this.canvas.height = this.height;\n\n  if(options.cover){\n    this.canvas.style.width = this.canvas.style.height = '100%';\n  }else{\n    this.canvas.style.width = (this.width / this.ratio) + 'px';\n    this.canvas.style.height = (this.height / this.ratio) + 'px';\n  };\n\n  this.container = options.container;\n\n  this.wavesContainer = this.container.querySelector(options.wavesContainer);\n\n  this.wavesContainer.appendChild(this.canvas);\n\n  this.context = this.canvas.getContext('2d');\n\n  for(var i = 0; i < this.colors.length; i++){\n    var color = this.colors[i];\n\n    for(var j = 0; j < (3 * Math.random())|0; j++){\n      this.curves.push(new Curve({\n        controller: this,\n        color: color\n      }));\n    }\n  }\n}\n\n$.apply(Visualizer.prototype, {\n  colors: [\n    [32, 133, 252],\n    [94, 252, 169],\n    [253, 71, 103]\n  ],\n\n  clear(){\n    this.context.globalCompositeOperation = 'destination-out';\n    this.context.fillRect(0, 0, this.width, this.height);\n    this.context.globalCompositeOperation = 'lighter';\n  },\n\n  interpolate(propertyStr){\n    var increment = this[ propertyStr + 'InterpolationSpeed' ];\n\n    if(Math.abs(this.interpolation[propertyStr] - this[propertyStr]) <= increment){\n      this[propertyStr] = this.interpolation[propertyStr];\n    }else{\n      if(this.interpolation[propertyStr] > this[propertyStr]){\n        this[propertyStr] += increment;\n      }else{\n        this[propertyStr] -= increment;\n      }\n    }\n  },\n\n  paint(){\n    for(var i = 0, k = this.curves.length; i < k; i++){\n      this.curves[i].draw();\n    }\n  },\n\n  startDrawCycle(){\n    if(this.run === false){\n      return;\n    }\n\n    this.clear();\n\n    this.interpolate('amplitude');\n    this.interpolate('speed');\n\n    this.paint();\n    this.phase = (this.phase + Math.PI * this.speed) % (2 * Math.PI);\n\n    if(window.requestAnimationFrame){\n      window.requestAnimationFrame(this.startDrawCycle.bind(this));\n    }else{\n      setTimeout(this.startDrawCycle.bind(this), 20);\n    }\n  },\n\n  setAmplitude(value){\n    this.interpolation.amplitude = Math.max(Math.min(value, 1), 0);\n  },\n\n  setSpeed(value){\n    this.interpolation.speed = value;\n  },\n\n  start(){\n    this.tick = 0;\n    this.run = true;\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.wavesContainer.parentNode.classList.add('speaking');\n    this.canvas.classList.add('fadein');\n\n    this.startDrawCycle();\n  },\n\n  stop(){\n    this.tick = 0;\n    this.run = false;\n    this.wavesContainer.parentNode.classList.remove('speaking');\n    this.canvas.classList.remove('fadein')\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n});\n\nexport default $;\n","export default global;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}